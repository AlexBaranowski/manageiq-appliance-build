# Kickstart file automatically generated by anaconda.
# Run the text based installer to see dependency info in screenshots
logging --level=debug

#version=DEVEL
install
cdrom

# build time repos - these repos are used to install the initial packages
repo --name=base    --baseurl=http://mirror.centos.org/centos/7/os/x86_64/
repo --name=updates --baseurl=http://mirror.centos.org/centos/7/updates/x86_64/
repo --name=extras  --baseurl=http://mirror.centos.org/centos/7/extras/x86_64/
repo --name=epel    --baseurl=http://dl.fedoraproject.org/pub/epel/7/x86_64/

# repos to install packages not found in the os
repo --name=rh-postgresql94 --baseurl=http://www.softwarecollections.org/repos/rhscl/rh-postgresql94/epel-7-x86_64/

# Please also add to "post install repos" around line 212.
repo --name=manageiq-scl --baseurl=http://copr-be.cloud.fedoraproject.org/results/abellott/manageiq-scl/epel-7-x86_64/

lang en_US.UTF-8
keyboard us
network --onboot yes --device eth0 --bootproto dhcp
rootpw  --iscrypted $1$DZprqvCu$mhqFBjfLTH/PVvZIompVP/

# Note: 5900-5999 port range is for vnc and kickstart doesn't provide a way to specify a range
firewall --enabled --port=22:tcp,80:tcp,80:udp,443:tcp,443:udp,5432:tcp,5900:tcp,5901:tcp,5902:tcp,5903:tcp,5904:tcp,5905:tcp,5906:tcp,5907:tcp,5908:tcp,5909:tcp,5910:tcp,5911:tcp,5912:tcp,5913:tcp,5914:tcp,5915:tcp,5916:tcp,5917:tcp,5918:tcp,5919:tcp,5920:tcp,5921:tcp,5922:tcp,5923:tcp,5924:tcp,5925:tcp,5926:tcp,5927:tcp,5928:tcp,5929:tcp,5930:tcp,5931:tcp,5932:tcp,5933:tcp,5934:tcp,5935:tcp,5936:tcp,5937:tcp,5938:tcp,5939:tcp,5940:tcp,5941:tcp,5942:tcp,5943:tcp,5944:tcp,5945:tcp,5946:tcp,5947:tcp,5948:tcp,5949:tcp,5950:tcp,5951:tcp,5952:tcp,5953:tcp,5954:tcp,5955:tcp,5956:tcp,5957:tcp,5958:tcp,5959:tcp,5960:tcp,5961:tcp,5962:tcp,5963:tcp,5964:tcp,5965:tcp,5966:tcp,5967:tcp,5968:tcp,5969:tcp,5970:tcp,5971:tcp,5972:tcp,5973:tcp,5974:tcp,5975:tcp,5976:tcp,5977:tcp,5978:tcp,5979:tcp,5980:tcp,5981:tcp,5982:tcp,5983:tcp,5984:tcp,5985:tcp,5986:tcp,5987:tcp,5988:tcp,5989:tcp,5990:tcp,5991:tcp,5992:tcp,5993:tcp,5994:tcp,5995:tcp,5996:tcp,5997:tcp,5998:tcp,5999:tcp

authconfig --enableshadow --passalgo=sha512
selinux --enforcing
timezone --utc America/New_York

device mptbase
device mptscsih
device mptspi

bootloader --location=mbr --driveorder=vda --append="crashkernel=auto rhgb quiet net.ifnames=0 biosdevname=0"

# disk layout
zerombr
clearpart       --all --drives=vda

part pv.1             --ondrive=vda                     --size=16384
part /boot            --ondrive=vda                     --size=512   --fstype=xfs
part /var/www/miq_tmp --ondrive=vda                     --size=10240 --fstype=xfs --fsoptions="rw,noatime,nobarrier"
part pv.2             --ondrive=vda                     --size=10240 --grow

volgroup vg_system    --pesize=4096 pv.1
logvol /              --name=lv_os   --vgname=vg_system --size=10240 --fstype=xfs
logvol swap           --name=lv_swap --vgname=vg_system --size=4096  --grow

volgroup vg_data      --pesize=4096 pv.2
logvol /var/opt/rh/rh-postgresql94/lib/pgsql/data --name=lv_pg --vgname=vg_data --size=8192 --grow --fstype=xfs

reboot

%packages
@base --nodefaults
@server-policy --nodefaults
@development tools

epel-release       # http://dl.fedoraproject.org/pub/epel/7/x86_64/epel-release-7-5.noarch.rpm

createrepo
freeipmi
fuse-libs
httpd
ipmitool

# ruby dependencies auto-installed by ruby-install
# prefer to have these dependencies explicitly required in the kickstart
# https://github.com/postmodern/ruby-install/blob/8957e0d1a52d59b45cf48cef8f15a1d8ed921cd4/share/ruby-install/ruby/dependencies.txt
automake
gcc
gdbm-devel
libffi-devel
libyaml-devel
ncurses-devel
openssl-devel
readline-devel
zlib-devel

libxml2-devel                    # For nokogiri gem
libxslt-devel                    # For nokogiri gem
lshw                             # From epel
memcached
mod_ssl
net-snmp
net-snmp-libs
net-snmp-utils
nfs-utils
nodejs                           # used for asset pipeline asset compilation - From epel
OpenIPMI
openslp-devel                    # build requires
rh-postgresql94-postgresql          # appliance section
rh-postgresql94-postgresql-devel    # for pg gem
rh-postgresql94-postgresql-server   # appliance section
qpid-cpp-client-ssl              # Enable AMQP SSL connections - From epel
scl-utils
scl-utils-build                  # build requires
yum-utils
zip                              # build requires

# IPA Identity RPMs for External Authentication
c-ares
ipa-client
sssd-dbus
mod_intercept_form_submit
mod_auth_kerb
mod_authnz_pam
mod_lookup_identity
realmd

# IPA RPMs for certificate support
ipa-admintools
certmonger

# External Authentication - Adding Support for Active Directory
oddjob
oddjob-mkhomedir
sssd
adcli
samba-common

# External Authentication - LDAP
openldap-clients

cloud-init

wmi

<% if @target == "ovirt" %>
ovirt-guest-agent
<% elsif @target == "vsphere" %>
open-vm-tools
<% end %>

# exclude these defaults from the @core group, with a few (commented) exceptions
-aic94xx-firmware
-atmel-firmware
-b43-openfwwf
-bfa-firmware
#efibootmgr
#grub
-ipw2100-firmware
-ipw2200-firmware
-ivtv-firmware
-iwl100-firmware
-iwl1000-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6050-firmware
#kernel-firmware
-libertas-usb8388-firmware
#postfix
-ql2100-firmware
-ql2200-firmware
-ql23xx-firmware
-ql2400-firmware
-ql2500-firmware
-rt61pci-firmware
-rt73usb-firmware
-xorg-x11-drv-ati-firmware
-zd1211-firmware
-dracut-fips
-dracut-network
%end

%post --log=/root/anaconda-post.log

exec < /dev/tty3 > /dev/tty3
chvt 3
set -x

# For some reason, DEBUG is set but empty in the kickstart.
# Unset it so ruby_parser doesn't print LOTS of output.
unset DEBUG

###
## Create the manageiq firewall zone
###
firewall-offline-cmd --new-zone=manageiq

###
# Set the manageiq firewall zone as default
###
firewall-offline-cmd --set-default-zone=manageiq

###
# Allow HTTP, HTTPS, SSH and postgresql in the manageiq firewall zone
###
firewall-offline-cmd --zone=manageiq --add-service=http
firewall-offline-cmd --zone=manageiq --add-service=https
firewall-offline-cmd --zone=manageiq --add-service=ssh
firewall-offline-cmd --zone=manageiq --add-service=postgresql

www_root="/var/www"
app_root="$www_root/miq"
appliance_root="$www_root/manageiq-appliance"

rm -rf $app_root

git clone <%= @appliance_checkout.remote %> $appliance_root
pushd $appliance_root
  git checkout <%= @appliance_checkout.branch %>
  git reset --hard <%= @appliance_checkout.commit_sha %>
popd

mkdir -p $app_root
git clone <%= @manageiq_checkout.remote %> $app_root/vmdb
pushd $app_root/vmdb
  git checkout <%= @manageiq_checkout.branch %>
  git reset --hard <%= @manageiq_checkout.commit_sha %>
popd

# Symlink extracted repo (manageiq-appliance) to old /var/www/miq/system location.
ln -vs $appliance_root $app_root/system

# Symlink old lib directory to gems/pending.
ln -vs $app_root/vmdb/gems/pending $app_root/lib

#### TODO: Refactor this so the cfme rpm and the upstream share much of this code.

mkdir -p $app_root/vmdb/log/apache
mkdir -p /etc/httpd/conf.d

pushd $appliance_root
  #symlink some executables
  mkdir -p /bin
  pushd ./LINK/bin
    for filename in `ls`; do
      ln -vs $appliance_root/LINK/bin/$filename /bin/$filename
    done
  popd

  #symlink some configuration files
  pushd ./LINK/etc
    for dirname in `ls`; do
      pushd ./$dirname
        mkdir -p /etc/$dirname
        for filename in `ls`; do
          ln -vs $appliance_root/LINK/etc/$dirname/$filename /etc/$dirname/$filename
        done
      popd
    done
  popd

  ln -vs $appliance_root/LINK/.toprc /.toprc

  #copy all files/directories below COPY
  cp -vr COPY/* /
popd

# post install repos
# yum update uses these repos to update and reinstall packages.
# Please also add to "build time repos" around line 20

pushd /etc/yum.repos.d/
  wget http://copr.fedoraproject.org/coprs/abellott/manageiq-scl/repo/epel-7/abellott-manageiq-scl-epel-7.repo
popd

wget -O ruby-install.tar.gz https://github.com/postmodern/ruby-install/archive/v0.5.0.tar.gz
tar -xzvf ruby-install.tar.gz
rm -f ruby-install.tar.gz
cd ruby-install*/
make install

# Note, we hardcode the ruby patch level for now.
# Once the --update option is available, we could ask
# ruby-install to "learn" what new rubies are available
# See: https://github.com/postmodern/ruby-install/issues/175
/usr/local/bin/ruby-install ruby 2.2.3 -- --disable-install-doc --enable-shared

# Add the ruby binaries path to the PATH so we can find bundle and friends:
ruby_bin_path=(/opt/rubies/ruby-2.2.3/bin)
echo "export PATH=\$PATH:$ruby_bin_path" >> /etc/default/evm

cat /etc/default/evm

echo "gem: --no-ri --no-rdoc --no-document" > /root/.gemrc

echo "export BUNDLE_WITHOUT=$BUNDLE_WITHOUT:qpid" >> /etc/default/evm_bundler

# https://github.com/plataformatec/devise/issues/909
# Verify this is needed to fix bundle install issue: ArgumentError: invalid byte sequence in US-ASCII
# Perhaps during kickstart the locale/lang is not set and defaults to US-ASCII.
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

[[ -s /etc/default/evm ]] && source /etc/default/evm
gem install bundler -v ">=1.8.4"

pushd /var/www/miq/vmdb
  bundle install
popd

/var/www/miq/system/cfme-setup.sh

# Enable top(1) and vmstat(1) data logging
systemctl enable miqtop
systemctl enable miqvmstat

systemctl enable evminit
systemctl enable evmserverd
systemctl enable evm-watchdog

# Link ctrl-alt-del.target to /dev/null to prevent reboot from console
ln -sf /dev/null /etc/systemd/system/ctrl-alt-del.target

# Create the journal directory to enable persistant logging
mkdir /var/log/journal
systemctl restart systemd-journald

# Create a script to initialize appliance on first boot
cat > /bin/appliance-initialize.sh <<EOF
#!/bin/sh
[[ -d /var/opt/rh/rh-postgresql94/lib/pgsql/data/base ]] && exit 0
[[ -s /etc/default/evm ]] && source /etc/default/evm
echo "Initializing Appliance, please wait ..." > /dev/tty1
appliance_console_cli --region 0 --internal --password smartvm
EOF
chmod 755 /bin/appliance-initialize.sh

# Create a systemd service to run it on first boot
cat > /usr/lib/systemd/system/appliance-initialize.service <<EOF
[Unit]
Description=Initialize Appliance Database
ConditionPathExists=!/var/opt/rh/rh-postgresql94/lib/pgsql/data/base
After=evminit.service
Before=evmserverd.service
[Service]
Type=oneshot
ExecStart=/bin/appliance-initialize.sh
ExecStartPost=/usr/bin/systemctl disable appliance-initialize
[Install]
WantedBy=multi-user.target
EOF

# Finally, enable the service
systemctl enable appliance-initialize

# Let's rebuild the ramfs with with base scsi drivers we need
kversion=$(rpm -q kernel --qf '%{version}-%{release}.%{arch}\n')
ramfsfile="/boot/initramfs-$kversion.img"
/sbin/dracut --force --add-drivers "mptbase mptscsih mptspi" $ramfsfile $kversion

chvt 1
%end
